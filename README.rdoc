= Welcome to Tr8n Translation Engine

Tr8n translation engine is a rails engine plugin that provides a framework for crowd-source translations and management of any internationalized text 
throughout any rails based application. The power of the engine comes from its simple and friendly user interface that allows site users 
to rapidly translate the site into hundreds of languages. The flexible and robust rules engine that powers Tr8n allows for any combinations 
of language specific rules in any translatable sentence. Users themselves can provide information on what sentences depend on gender rules, 
number rules or other types of rules supported by the engine. The language specific rules can be registered and managed for any language in 
the advanced user interface. The engine also provides a set of powerful admin tools that allow admins to manage any aspect of the engine; 
enabling and disabling its features and monitoring translation process.

The Tr8n engine itself is based on a very robust and flexible pluggable architecture where rule types and even syntax of the "tr" tokens 
can be configured or extended for any application deployment.

= Installation Instructions

Tr8n is mostly self-contained. The only two plugins it depends on are will_paginate created by Mislav MarohniÄ‡ for results pagination 
and will_filter created by me for filtering results in the admin interface. 

To install the required plugins, run the following commands:

  $ script/plugin install git://github.com/mislav/will_paginate.git
  
  $ script/plugin install git://github.com/berk/will_filter.git
  $ rake will_filter:sync  


To install, configure and initialize Tr8n engine, run the following commands: 

  $ script/plugin install git://github.com/berk/tr8n.git
  $ rake tr8n:sync         
  
  $ script/generate tr8n_migration
  $ rake db:migrate 
  $ rake tr8n:init

  $ cd public; ln -s ../vendor/plugins/tr8n/public/tr8n tr8n

= Integration Instructions

Now you are ready to integrate t8n into your application. Tr8n comes with a bunch of default configurations 
that, mostly likely, will be applicable to your application. When you run the "rake tr8n:sync" command the 
configuration files were copied into your application config folder under the tr8n folder. 

The main Tr8n configuration file is located here:

  config/tr8n/config.yml

The content of the file is mostly self-explanatory. The most important parts of the config that you may want to review and change are the following:
  
  site_info:                                        # site integration details
    current_user_method:      current_user          # should be defined in application controller, provides current user object
    current_locale_method:    current_locale        # should be defined in application controller, provides current site locale
    title:                    Tr8n                  # site title, for customization of some messages
    default_url:              /home                 # site default url
    default_locale:           en-US
    sitemap_path:             /config/tr8n/site/sitemap.json
    splash_screen:            /tr8n/common/splash_screen
    admin_layout:             admin                 # layout to be used for admin interface
    tr8n_layout:              application           # layout to be used for tr8n ui
    user_info:  
      enabled:                true                  # if disabled, more configuration needed, read the guide
      class_name:             User
      methods:  
        id:                   id                    # user id 
        name:                 name                  # user name
        admin:                admin?                # if the user has amdin rights
        guest:                guest?                # if the user is a guest
        mugshot:              mugshot               # url of the user picture
        link:                 link                  # link to the user page
        locale:               locale                # user's selected locale


Here are some of the key elements with descriptions:

* current_user_method must be defined in the application controller and it should return the current_user of the application. Below is a sample implementation of the method. You may already have it defined:


  def current_user
    @current_user ||= (session[:user_id] ? User.find_by_id(session[:user_id]) : User.new) || User.new   
  end
  helper_method :current_user


* current_locale_method returns the current language of the application. This method is option. If not provided it will fallback on the following implementation:


  def current_locale
    session[:locale] = Tr8n::Config.default_locale unless session[:locale]
    session[:locale] = params[:locale] if params[:locale]
  end
  helper_method :current_locale


* The default_locale of the site assumes that your default language is English, but if it is not the case, you can change to whatever language your site is written in.  
* If you would like to have a translation sitemap in the translation tools, please review and provide your own sitemap.json file.
* Tr8n assumes that your user class is User. If it is not the case, change the class name to whatever object that represents your user.
* Tr8n needs a number of methods to integrate with your users. Please review and provide the implementation for those methods.
* If you don't like the Tr8n splash screen and would like to customize it for your application, you can provide the path to the partial that needs just a div tag with your splash screen in it. 

== Tr8n Helper Tags

Once you have configured the Tr8n engine, you are ready to use it. 
You will need some of the following tags in your application:

  <%= tr8n_scripts_tag %>

You have to add this tag to the bottom of your application layout so that Tr8n scripts are initialized and your application can be translated.

  <%= tr8n_language_selector_tag %>

Usually this tag is added to the top right corner of the application layout. It will display the current language 
and allow you to select a different language (out of the 109 languages that tr8n comes configured with).

  <%= tr8n_language_strip_tag %>

Usually this tag is added to the bottom of the application layout. It will display a strip of featured languages and will 
allow you to select more languages using an arrow link. You will have to configure your featured languages using the admin tool of the Tr8n engine.


= Tr8n Notations

The following sections give a quick overview for how to integrate tr8n into your rails application. 
For full details use the Tr8n Integration Guide. 

== Label Internationalization

The function for internationalizing labels has the following signature:

  <%= tr(LABEL, DESCRIPTION = "", TOKENS = {}, OPTIONS = {}) %>

  * LABEL is a required string 
  * DESCRIPTION is an optional, but highly recommended string
  * TOKENS is an optional hash of token values - it is required if tokens are used in the label 
  * OPTIONS is an optional hash of options

The following is the first simplest example of an internationalized phrase:

  <%= tr("Hello World") %>
  
or alternatively:

  <%= "Hello World".translate %>
 
As you might have noticed, the DESCRIPTION is not mandatory, but it should be used in cases when the label alone is not sufficient enough to 
determine the meaning of the sentence being translated. For example, when the translators use the bulk translation mode and look 
at the list of strings, they won't be able to tell what the "Invite" by itself means. In that case DESCRIPTION will be very helpful. 

Tr8n translation engine uses label and description to create a unique key for each phrase. So the description serves two purposes: 
it creates a unique key for each label and it also gives a hint to the translators for the context in which the label is used. For example,
the following two phrases will be registered as two independent entries in a database even though the have the same label, but a different description.
The user will have to translate each one of them separately as they will have different translated labels in other languages.

  <%= tr("Invite", "Link to invite your friends to join the site") %>
  <%= tr("Invite", "An invitation you recieved from your friend") %>

It is important to provide the best possible description for each phrase from the start. Keep in mind that changing a description 
in the future, after it has already been translated, will register a new phrase in the database and invalidate all of its translations.  
On the other hand, labels that are complete sentences may not need a description as they are fully self-contained.

There are a number of other flavors of the "tr" function like trl, trfe, trfn that set default options for various reasons. 
You can read more about them in the Tr8n Integration Guide.

== Tr8n Internationalization Notations

The following is a short summary of the tr8n's internationalization notations.

=== Definition of Tr8n Tokens

It would have been boring if all of the labels in a site were just simple sentences without any dynamic data or decorations. 
Tr8n tokens are there to support the dynamic information in a label. 

Currently there are two major types of tokens defined in the extensible Tr8n syntax: data tokens and decoration tokens.
Data tokens are defined as any strings surrounded by curly brackets inside of a label. So anything of this form 
{TOKEN_NAME} is considered a data token. 

Decoration tokens are defined as any string surrounded by squared brackets inside of a label. So anything of this form 
&#91;TOKEN_NAME: decorated value&#92; is considered a decoration token. 

There are a number of different flavors of data tokens. Below are some of the flavors with some examples. 

=== Data Tokens

There is a number of ways to substitute a data token with a value. Below are some of the main examples.

Simple string substitution:  

  <%= tr("Dear {user}", "Fragment sample", :user => current_user) %>

The to_s function will be applied on the value of the current_user variable and substituted into the {user} token.
  
==== Value substitution:

  <%= tr("Dear {user}", "Fragment sample", :user => [current_user, display_user(current_user)]) %>
  
Notice one important thing that current_user is passed as a first element in the array. 
This is done for gender rules evaluation - i will describe this in the later sections. 
The second value is the actual value we want to subsitute into the {user} token.  
  
==== Value substitution using symbol method call:

  <%= tr("Dear {user}", "Fragment sample", :user => [current_user, :first_name])  %>
  
As in the previous example, first object for rules engine, second is a symbol that represents a method that will be called on 
the object and the result will be placed into the {user} token. 
  
==== Value substitution using symbol method call with parameters:

  <%= tr("Dear {user}", "Fragment sample", :user => [current_user, :some_method, "value"])  %>
  
Same as the above example, but the method can be called with some parameters.
  
==== Value substitution using lambda method call:

  <%= tr("Dear {user}", "Fragment sample", :user => [current_user, lambda{|val| html_for(val)}])  %>

The second parameter can also be a lambda. In that case current_user will be passed as a val into the lambda and the
result of the lambda evaluation will be placed into the {user} token.  
  
==== Value substitution using lambda method call with parameters:

  <%= tr("Dear {user}", "Fragment sample", :user => [current_user, lambda{|val, test| html_for(val, test)}], "test"])  %>

Same as the above, but lambda has some additional parameters.

You may be wondering why we need so many variations. Well, they are all useful, as you will see later.


=== Method Tokens

Method token allows you to call a method on a token itself. It is useful if you have multiple method calls on the same token in one sentence.
Consider the following example:

  <%= tr("Dear {user.first_name} {user.last_name}", "Fragment sample", :user => current_user) %>

Since the substitution is implied in the token definition itself, you don't have to use any of the basic data token substitution forms.

=== Hidden Tokens

Hidden tokens are used primarely for the default language dynamic data substitution that would not make sense in the translated label.
Hidden tokens will not appear as tokens when translator opens the translation dialog. Consider the following examples: 

  <%= tr("{user} changed {_his_her} name", "Fragment sample", :user => current_user, :_his_her => current_user.his_her)  %>
  <%= tr("you have {count} {_messages}", "Fragment sample", :count => NUM, :_messages => "message".pluralize_for(NUM))  %>

In the first cases _his_her will be subsituted in English to the appropriate phrase based on the current_user gender. And in the second case
the correct form of message will be used based on whether the number is 1 or other.

There is a better approach for the above examples, using the Transform tokens. Those kind of tokens require rules engine and will be described a little later. 

=== Decoration tokens

Decoration tokens are used to decorate some text in a label whether. Consider the following example:

  <%= tr("[link: Click here] to visit our site", "Fragment sample", :link => lambda{|text| link_to(text, url)})  %>

When this label is rendered "Click here" will be turned into a link. Similarly you can do any kind of HTML decorations inside of the label.




